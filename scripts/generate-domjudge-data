#!/usr/bin/env python3

#
# generate_domjudge_data -- generate loginname/password and team category for teams  
#

import csv
import argparse
import string,random


parser = argparse.ArgumentParser(description="Extend simple csv file with 'login,names,emails' header with extra DOMjudge data such as a password. You can even omit the 'login' header, causing it also to be generated. This extended CSV file will be used to generate teams import data for DOMjudge and for generating emails to mail each team its credentials.")

parser.add_argument("TEAMS_CSV_FILE",help='CSV file with "login,names,emails" header where the "login" field is optional.')
parser.add_argument("TEAM_CONFIGURATION_NUMBER", type=int, help='integer specifying the team category assigned to these teams')
parser.add_argument("EXTENDED_TEAMS_CSV_FILE", help='name of output CSV file')

args = parser.parse_args()

teams_csv_file=args.TEAMS_CSV_FILE

outputfile=args.EXTENDED_TEAMS_CSV_FILE



team_config_number=args.TEAM_CONFIGURATION_NUMBER

# input csv file must have a header
teams_csv_file_handle = open(teams_csv_file, 'rt')
reader = csv.DictReader(teams_csv_file_handle, delimiter=",",  quotechar='"', quoting=csv.QUOTE_NONNUMERIC,skipinitialspace=True)
# note: skipinitialspace makes the reader to ignore spaces around delimiter


# getting rows; each row is a dictionary
rows=[]
for row in reader:
    rows.append(row)

# checking headers 
fieldnames = ["login","names","emails"]
missing_login=False
headers=rows[0].keys()
for idx, fieldname in enumerate(fieldnames):
    if fieldname not in headers:
        if fieldname == "login":
            missing_login=True
            print("NOTE: missing header 'login' will be generated automatically")
        else:     
            print("ERROR: missing header '" +  fieldname + "'")
            exit(1)  

# add data
teamcounter=1
for row in rows:
    if missing_login:
        row["login"]="team"+str(teamcounter)
        teamcounter=teamcounter+1
    password = "".join(random.choice(string.ascii_uppercase + string.digits) for _ in range(10))  
    row["password"]=password 
    row["team-category"]="team-config-" + str(team_config_number)
fieldnames.append("password")
fieldnames.append("team-category")

with open(outputfile, 'w') as csvfile:
    writer = csv.DictWriter(csvfile, quotechar='"',delimiter=",", fieldnames=fieldnames, quoting=csv.QUOTE_NONNUMERIC, lineterminator="\n")
    # The setting quoting=csv.QUOTE_NONNUMERIC causes all data except numbers to be quoted when output to csv file
    # It determines this automatically from the data in a column.
    headerrow = dict( (n,n) for n in fieldnames )    
    writer.writerow(headerrow)
    for row in rows:
        writer.writerow(row)
   