#!/usr/bin/env python3

# NAME
#     create-domjudge-credentials-mails -- from DOMjudge import files accounts.yaml and teams.yaml we generate credential emails in a local mail/ directory
#
# USAGE
#    create-domjudge-credentials-mails [-h] ACCOUNTS_YAML_FILE TEAMS_YAML_FILE MAIL_FOLDER  COURSE_NAME FROM_EMAILADDRESS FROM_FULL_NAME
#
#    positional arguments:
#      ACCOUNTS_YAML_FILE  YAML file with user data for importing users into DOMjudge
#      TEAMS_YAML_FILE     YAML file with team data for importing teams into DOMjudge
#      MAIL_FOLDER         folder in which the mails are generated. This folder is created for you, and should not already exist.
#      COURSE_NAME         Name of the course
#      FROM_EMAILADDRESS   Email address used to send the generated emails.
#      FROM_FULL_NAME      Full name of person which sends the generated emails. (person of FROM_EMAILADDRESS)
#
#    options:
#      -h, --help          show this help message and exit

import yaml
import argparse
import os

# template for the email generated
template = """\
To: {to_address} 
From: {from_address}
Subject: {course_name}: DOMjudge login credentials for part {partnumber}
Content-Type: text/plain; charset=us-ascii

Dear {name},

Below are the login credentials for the DOMjudge system used for the practicals.
Further information will follow.

   User     : {username}
   Password : {password}
   
   Team     : {teamname}  

Best regards,
{sender}
"""

# define parser for arguments of cmdline script
parser = argparse.ArgumentParser(
    description="from DOMjudge import files accounts.yaml and teams.yaml we generate credential emails in a local mail/ directory"
)
parser.add_argument(
    "ACCOUNTS_YAML_FILE",
    help="YAML file with user data for importing users into DOMjudge",
)
parser.add_argument(
    "TEAMS_YAML_FILE", help="YAML file with team data for importing teams into DOMjudge"
)
parser.add_argument(
    "MAIL_FOLDER",
    help="folder in which the mails are generated. This folder is created for you, and should not already exist.",
)
parser.add_argument("COURSE_NAME", help="Name of the course.")
parser.add_argument(
    "FROM_EMAILADDRESS", help="Email address used to send the generated emails."
)
parser.add_argument(
    "FROM_FULL_NAME",
    help="Full name of person which sends the generated emails. (person of FROM_EMAILADDRESS)",
)

# parse cmdline args
args = parser.parse_args()
accounts_yaml_file = args.ACCOUNTS_YAML_FILE
teams_yaml_file = args.TEAMS_YAML_FILE
mail_folder = args.MAIL_FOLDER
course_name = args.COURSE_NAME
from_emailaddress = args.FROM_EMAILADDRESS
from_full_name = args.FROM_FULL_NAME


# create mail folder; if it already exists we quit with an error because
# we do not want to corrupt an already existing mail folder
if os.path.exists(mail_folder):
    print(f"Error: The folder '{mail_folder}' already exists.")
    exit(1)
else:
    os.makedirs(mail_folder)
    print(f"The folder '{mail_folder}' has been created.")

accounts_yaml_file_handle = open(accounts_yaml_file, "rt")
teams_yaml_file_handle = open(teams_yaml_file, "rt")

accounts = yaml.safe_load(accounts_yaml_file_handle)
teams = yaml.safe_load(teams_yaml_file_handle)


# make dictionary to lookup a team by its team's ID
teamid2team = {}
for team in teams:
    teamid2team[team["id"]] = team

# per user we gather template data and fill the mail template and save it to the mail folder
for user in accounts:
    # collect template data for user from both its user as team data
    team_id = user["team_id"]
    team = teamid2team[team_id]
    # we fetch part number from team ID's third character, so
    # part number should not be bigger then 9!
    partnumber = team_id[2]
    data = {
        "sender": from_full_name,
        "name": user["name"],
        "username": user["username"],
        "password": user["password"],
        "to_address": user["email"],
        "from_address": from_emailaddress,
        "teamname": team["display_name"],
        "partnumber": partnumber,
        "course_name": course_name,
    }

    # fill email template with data
    mailcontent = template.format(**data)

    # save generated mail in mail/ folder using its email as filename
    # note: by using .eml extension it can be used by email programs
    output_file = mail_folder + "/" + user["email"] + ".eml"
    output_file_handle = open(output_file, "w")
    output_file_handle.write(mailcontent)
    output_file_handle.close()
