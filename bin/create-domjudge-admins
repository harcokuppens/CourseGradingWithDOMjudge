#!/usr/bin/env python3

# NAME
#     create-domjudge-admins -- from an admins.csv we generate an import file admin-accounts.yaml and credential emails in a local mail/ directory
#
# USAGE
#    create-domjudge-credentials-mails [-h] ADMINS_CSV_FILE MAIL_FOLDER FROM_EMAILADDRESS FROM_FULL_NAME
#
#    positional arguments:
#      ADMINS_CSV_FILE     CVS file with admins data (name,email) for importing admins into DOMjudge
#      MAIL_FOLDER         folder in which the mails are generated. This folder is created for you, and should not already exist.
#      FROM_EMAILADDRESS   Email address used to send the generated emails.
#      FROM_FULL_NAME      Full name of person which sends the generated emails. (person of FROM_EMAILADDRESS)
#
#    options:
#      -h, --help          show this help message and exit

# Design
# --------
#
# Goal of this script:
#   1. create administrator accounts which all are allowed
#      to submit to a 'Test' contest for testing new problems.
#   2. create emails to inform admins of their credentials (automating this saves time)
#
# We use a different strategy to create admin's then when creating team users,
# because by experimenting we discovered that DOMjudge behaves different
# when we create admins when importing with an "accounts.yaml".
#
# E.g. if import accounts.yaml with content:
#
#     - id: idjohn
#       username: john
#       password: Uf4PYRA7mJ
#       type: "admin"             => can only specify only one role, but also gets "team" role if you specify "admin"
#       name: John Doe
#       team_id: "testteam"
#
# It then creates in DOMjudge the following user
#
#   User John Doe
#
#       ID	15
#       External ID	idjohn
#       Login	john
#       Name    John Doe
#       Role    Team and Admin       => both ! (see remark above)
#
# However it ignores "team_id" if you create an "admin" user.
# Instead it creates for this "admin" automatically the team:
#
#    Team John Doe
#
#       ID	9
#       External ID	john      ->  copied from user 'Login'
#       ICPC ID	-
#       Name	John Doe      ->  copied from user 'Name'
#       Team Category:    Jury    -> has visibility no
#
# Note, that "team_id" is not ignored when you use "type: team".
# And when "type: admin" it also creates the team automatically
# even when "team_id" is not given.
#
# Originally my Idea was to create an 'Test' team, and make
# all admins members. However that was impossible, because
# the 'team_id' field is ignored when creating admins.
# So instead I just decided to configure the 'Test' contest
# to only allow teams with the "Jury" team category, because
# the team automatically created have the "Jury" category!
#
# With the same information we create the teams.yaml we
# also create  credential emails which we can send with
# the 'send-emails' script to the new admins.

import argparse
import os
import csv
import random
import string

# template for the email generated
template = """\
To: {to_address} 
From: {from_address}
Subject: Algorithms and data structures: DOMjudge login credentials for Admin account 
Content-Type: text/plain; charset=us-ascii

Dear {name},

Below are the login credentials for your DOMjudge admin account. 

   User     : {username}
   Password : {password}
   
DOMjudge generated automatically also a team for this account on import.
   
   Team          : {teamname}  
   Team Category : Jury

I also created a 'Test' contest which only allows submission from users in
the 'Jury' team category. This contest can be used to test new problems
in DOMjudge itself.

Best regards,
{sender}
"""


def parseargs():

    # define parser for arguments of cmdline script
    parser = argparse.ArgumentParser(
        description="from a admins.csv file create the DOMjudge import file admin-accounts.yaml for users with 'admin' role, and generate credential emails in a local mail/ directory to inform the admins"
    )

    parser.add_argument(
        "ADMINS_CSV_FILE",
        help="CSV file with amin data for importing admins into DOMjudge",
    )

    parser.add_argument(
        "MAIL_FOLDER",
        help="folder in which the mails are generated. This folder is created for you, and should not already exist.",
    )
    parser.add_argument(
        "FROM_EMAILADDRESS", help="Email address used to send the generated emails."
    )
    parser.add_argument(
        "FROM_FULL_NAME",
        help="Full name of person which sends the generated emails. (person of FROM_EMAILADDRESS)",
    )

    # parse cmdline args
    args = parser.parse_args()
    admins_csv_file = args.ADMINS_CSV_FILE
    mail_folder = args.MAIL_FOLDER
    from_emailaddress = args.FROM_EMAILADDRESS
    from_full_name = args.FROM_FULL_NAME

    return (
        admins_csv_file,
        mail_folder,
        from_emailaddress,
        from_full_name,
    )


def check_headers(
    required_headers, optional_headers, given_headers, allow_extra_headers=True
):
    check_headers = list(required_headers)
    # teamname header not required
    for header in optional_headers:
        if header not in given_headers:
            check_headers.remove(header)

    num_headers = len(check_headers)
    # checking headers : check each required fieldname present
    for idx, header in enumerate(given_headers):
        if header in check_headers:
            check_headers.remove(header)
        else:
            if not allow_extra_headers:
                print("ERROR: wrong header '" + header + "'")
                print("       header row should contain ONlY the fields :")
                print("        " + str(required_headers))
                print('       where "teamname" header is optional')
                exit(1)

    if len(check_headers) != 0:
        print("ERROR: missing headers '" + str(check_headers) + "'")
        print("       header row should contain the fields :")
        print("        " + str(required_headers))
        print('       where "teamname" header is optional')
        exit(1)

    return num_headers


def read_csv_file(teams_csv_file, required_headers, optional_headers=[]):

    # read rows csv file
    teams_csv_file_handle = open(teams_csv_file, "rt")
    reader = csv.DictReader(
        teams_csv_file_handle,
        delimiter=",",
        quotechar='"',
        # quoting=csv.QUOTE_NONNUMERIC,
        skipinitialspace=True,
    )
    # note: skipinitialspace makes the reader to ignore spaces around delimiter

    # getting rows; each row is a dictionary
    rows = []
    for row in reader:
        if any(value == None for value in row.values()):
            index = list(row.values()).index(None)
            field = list(row.keys())[index]
            print(
                f"ERROR: Missing value for field '{field}' in '{teams_csv_file}' at line {reader.line_num}"
            )
            exit(1)
        rows.append(row)

    # csv file must have a header in the first row:
    found_headers = list(rows[0].keys())
    # we are checking the found header is correct
    check_headers(required_headers, optional_headers, found_headers)

    return (rows, found_headers)


def get_users_teams_from_rows(rows):

    users = []
    for row in rows:
        name = row["name"]
        email = row["email"]
        password = "".join(
            random.choice(string.ascii_uppercase + string.digits) for _ in range(10)
        )
        user = {
            "id": email,
            "username": email,
            "password": password,
            "type": "admin",
            "email": email,
            "name": name,
            "teamname": name,
        }
        users.append(user)
    return users


def write_domjudge_import_file_accounts_yaml(users):
    #     - id: u-1-001
    #       username: "pietvenema@gmail.com"   (login)
    #       password: ...
    #       type: "admin"
    #       email: pietvenema@gmail.com
    #       name: "Piet Venema"   (fullname)
    #       team_id: "t-1-001"                  -> we skip this field, because ignored if type: "admin",
    #                                              and DOMjudge automatically creates a team for the new admin automatically.
    accounts_yaml_file = "admin-accounts.yaml"
    usersfile = open(accounts_yaml_file, "w")
    for user in users:
        usersfile.write(
            '- id: "{id}"\n  username: "{username}"\n  password: "{password}"\n  type: "admin"\n  name: "{name}"\n  email: "{email}"\n'.format(
                **user
            )
        )
    usersfile.close()


def write_mails(users, from_full_name, from_emailaddress, mail_folder):

    # create mail folder; if it already exists we quit with an error because
    # we do not want to corrupt an already existing mail folder
    if os.path.exists(mail_folder):
        print(f"Error: The folder '{mail_folder}' already exists.")
        exit(1)
    else:
        os.makedirs(mail_folder)
        print(f"The folder '{mail_folder}' has been created.")

    # per user we gather template data and fill the mail template and save it to the mail folder
    for user in users:
        data = {
            "sender": from_full_name,
            "name": user["name"],
            "username": user["username"],
            "password": user["password"],
            "to_address": user["email"],
            "from_address": from_emailaddress,
            "teamname": user["teamname"],
        }

        # fill email template with data
        mailcontent = template.format(**data)

        # save generated mail in mail/ folder using its email as filename
        # note: by using .eml extension it can be used by email programs
        output_file = mail_folder + "/" + user["email"] + ".eml"
        output_file_handle = open(output_file, "w")
        output_file_handle.write(mailcontent)
        output_file_handle.close()


def main():

    (
        admins_csv_file,
        mail_folder,
        from_emailaddress,
        from_full_name,
    ) = parseargs()
    # defined required and optional headers
    required_headers = ["name", "email"]
    (rows, found_headers) = read_csv_file(admins_csv_file, required_headers)

    users = get_users_teams_from_rows(rows)

    write_domjudge_import_file_accounts_yaml(users)

    write_mails(users, from_full_name, from_emailaddress, mail_folder)


if __name__ == "__main__":
    main()
