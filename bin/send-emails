#!/bin/bash

set -e            # exit on error
set -u            # exit on undefined variable
set -o pipefail   # exit on error in pipe
shopt -s nullglob # expand empty globs to nothing, not to itself

readonly USAGE="

USAGE:
  send-emails [-t] FROM_EMAIL DIR_CONTAINING_EMAILS [SLEEP_BETWEEN_SENDING_EMAILS]
  
PARAMS:
  FROM_EMAIL: email address used as sender
  DIR_CONTAINING_EMAILS: the .eml files in this directory get send
  SLEEP_BETWEEN_SENDING_EMAILS: sleep between sending a previous and next email.
                                By default this value is 6 in seconds.

DESCRIPTION:
  The send-emails script allows you to first setup a folder containing emails 
  in .eml files, after which you can send them out automatically with the 
  send-emails script. If each email has a single recepient, then it is a
  good convention to set the basename of the email file to the recepients
  email address. 

  Some mail servers do not allow more then X emails to be send per minute.
  To prevent you email account to be blocked, we sleep between sending emails.
  We set the default to limit sending a maximum of 10 emails per minute.
  This is a safe limit, but note that to send 100 emails this will take 10 minutes. 

  By using the '-t' option the emails are send to the sender's email address 
  instead of the recipient's email address specified in the .eml file. This
  could be useful for testing.
"

FORCE_RETURN_SENDER_MODE="false"
if [[ "${1-}" == "-t" ]]; then
    FORCE_RETURN_SENDER_MODE="true"
    shift
fi

if [[ "$#" -lt "2" || "$#" -gt "3" ]]; then
    echo "$USAGE"
    exit 0
fi

SLEEP_VALUE="6s"
if [[ "$#" -eq "3" ]]; then
    SLEEP_VALUE="$3"
fi

VALID_SLEEP_PATTERN="^[0-9]+(\.[0-9]+)?[smhd]?$"
if ! [[ "$SLEEP_VALUE" =~ $VALID_SLEEP_PATTERN ]]; then
    echo "Error: Invalid sleep value format '$SLEEP_VALUE'." 1>&2
    echo "Please provide a positive number, optionally with a unit (s, m, h, d)." 1>&2
    exit 1
fi

from_email="$1"
from_directory="$2"

VALID_EMAIL_PATTERN="^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"
if ! [[ "$from_email" =~ $VALID_EMAIL_PATTERN ]]; then
    echo "ERROR: invalid email address '$from_email'" 1>&2
    exit 1
fi

if [[ ! -d "$from_directory" ]]; then
    echo "ERROR: directory '$from_directory' does not exist" 1>&2
    exit 1
fi

if [[ "$FORCE_RETURN_SENDER_MODE" == "true" ]]; then
    printf "TEST MODE: sending emails to the sender's email address instead; Sending to '%s'.\n" "$from_email"
fi    
for mailfile in "$from_directory"/*.eml; do
    #to_email=$(basename "${mailfile%.eml}")
    #printf "sending %s to %s\n" "$mailfile"  "$to_email"
    printf "sending %s\n" "$mailfile"
    #cat $mailfile | mutt -s "subject" -- $email
    # prefer sendmail, because then also subject and recipient in mailfile which gives the ability to setup a more complete email in a mailfile earlier
    if [[ "$FORCE_RETURN_SENDER_MODE" == "true" ]]; then
        sendmail -i -f "$from_email" "$from_email" <"$mailfile"
    else
        sendmail -t -i -f "$from_email" <"$mailfile"
    fi
    echo "sleep $SLEEP_VALUE to prevent overflowing mail server"
    sleep "$SLEEP_VALUE"
done
